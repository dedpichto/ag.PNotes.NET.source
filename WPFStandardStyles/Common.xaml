<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sts="clr-namespace:WPFStandardStyles">
    <Geometry x:Key="DownArrow">M 4 2 L 8 8 L 12 2 Z</Geometry>

    <Style x:Key="ToolbarImage" TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="10" ShadowDepth="1" Opacity="0.7" Color="{DynamicResource LightContrastColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="GridLineHorz" TargetType="Rectangle">
        <Setter Property="Height" Value="1"/>
        <Setter Property="StrokeThickness" Value="0.5"/>
        <Setter Property="Stroke" Value="{DynamicResource NormalTextBrush}"/>
        <Setter Property="Opacity" Value="0.1"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Stroke" Value="{DynamicResource DisabledTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GridLineVert" TargetType="Rectangle">
        <Setter Property="Width" Value="1"/>
        <Setter Property="StrokeThickness" Value="0.5"/>
        <Setter Property="Stroke" Value="{DynamicResource NormalTextBrush}"/>
        <Setter Property="Opacity" Value="0.1"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Stroke" Value="{DynamicResource DisabledTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type sts:ToolbarButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="28"/>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sts:ToolbarButton}">
                    <Grid>
                        <Border x:Name="Border" 
                                Background="{TemplateBinding Background}"
                                BorderThickness="1">
                            <ContentPresenter 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                    RecognizesAccessKey="True"
                                    TextElement.Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource ToolbarButtonHoverBrush}"/>
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="1"/>
                            <!--<Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolbarButtonSelectedBorderBrush}"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource ToolbarButtonSelectedBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ButtonDisabledTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="sts:Utils.IsBigIcon" Value="true">
                <Setter Property="Width" Value="36"/>
                <Setter Property="Height" Value="36"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type sts:ToolbarToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="28"/>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sts:ToolbarToggleButton}">
                    <Grid>
                        <Border x:Name="Border" 
                                Background="{TemplateBinding Background}"
                                BorderThickness="1">
                            <ContentPresenter 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                    RecognizesAccessKey="True"
                                    TextElement.Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource ToolbarButtonHoverBrush}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ButtonSelectedTextBrush}"/>
                            <!--<Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolbarButtonSelectedBorderBrush}"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource ToolbarButtonSelectedBackgroundBrush}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolbarButtonSelectedBorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsEnabled" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource DisabledTextBrush}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource DisabledTextBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ButtonDisabledTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="sts:Utils.IsBigIcon" Value="true">
                <Setter Property="Width" Value="36"/>
                <Setter Property="Height" Value="36"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type sts:DropDownButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonTextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sts:DropDownButton}">
                    <Grid>
                        <Border x:Name="Border" 
                                Background="{TemplateBinding Background}"
                                BorderThickness="1">
                            <Grid Margin="{TemplateBinding Padding}" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Grid.Column="0"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                    RecognizesAccessKey="True"
                                    TextElement.Foreground="{TemplateBinding Foreground}"/>
                                <Path x:Name="downPath" 
                                          Grid.Column="1" 
                                          VerticalAlignment="Center" 
                                          HorizontalAlignment="Center" 
                                          Fill="{TemplateBinding Foreground}"
                                          Data="{StaticResource DownArrow}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource ToolbarButtonHoverBrush}"/>
                            <!--<Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolbarButtonSelectedBorderBrush}"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Border" 
                                    Property="Background" 
                                    Value="{DynamicResource ToolbarButtonSelectedBackgroundBrush}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolbarButtonSelectedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ButtonDisabledTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="sts:Utils.IsBigIcon" Value="true">
                <Setter Property="Width" Value="44"/>
                <Setter Property="Height" Value="36"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ToolbarSeparator" TargetType="Separator">
        <Setter Property="Width" Value="1"/>
        <Setter Property="Margin" Value="1,3,1,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border BorderBrush="{DynamicResource StatusBarSeparatorBrush}"
                            BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>